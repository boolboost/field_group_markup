<?php
/**
 * @file
 * field_group_markup.module
 *
 * Defines a field group display formatter.
 */

/**
 * Default values format settings.
 */
function _field_group_markup_wrapper($tag, array $attrs = array()) {
  // default tag
  if (!$tag) {
    $tag = 'div';
  }

  if ($tag || $attrs) {
    return array(
      '#prefix' => '<' . $tag . drupal_attributes($attrs) . '>',
      '#suffix' => '</' . $tag . '>',
    );
  }
  
  return array(
    '#prefix' => '',
    '#suffix' => '',
  );
}

/**
 * Default values format settings.
 */
function _field_group_markup_format_settings_default() {
  return array(
    'wrapper_selector' => '',
    'group_selector' => '',
    'label_selector' => '',
    'elements_group_selector' => '',
    'markup' => '',
    'show_label' => FALSE,
    'hide_group' => FALSE,
    'before' => '',
    'after' => '',
  );
}

/**
 * Parse css selector.
 */
function _field_group_markup_parse_selector($selector) {
  $attrs = array();
  $tag = '';

  if (preg_match_all('/(^[\w\-]+)|(#[\w\-]+)|(\.[\w\-]+)|(\[[\w\-]+="[\w\-\s]+"\])/iu', $selector, $matches)) {
    // tag
    $matches[1] = array_values(array_filter($matches[1]));
    if (isset($matches[1][0])) {
      $tag = $matches[1][0];
    }

    // id
    $matches[2] = array_values(array_filter($matches[2]));
    if (isset($matches[2][0])) {
      $attrs['id'] = substr($matches[2][0], 1);
    }

    // classes
    $matches[3] = array_values(array_filter($matches[3]));
    if ($matches[3]) {
      $attrs['class'] = array();
      foreach ($matches[3] as $value) {
        $attrs['class'][] = substr($value, 1);
      }
    }

    // attrs
    $matches[4] = array_values(array_filter($matches[4]));
    if ($matches[4]) {
      foreach ($matches[4] as $value) {
        list($name, $value) = explode('="', substr($value, 1, -2), 2);
        $attrs[$name] = $value;
      }
    }
  }

  return array($tag, $attrs);
}

/**
 * Implements hook_field_group_formatter_info().
 *
 * Define the field group link display formatter.
 */
function field_group_markup_field_group_formatter_info() {
  $group_additions = array(
    'markup' => array(
      'label' => t('Markup'),
      'format_types' => array('open'),
      'default_formatter' => 'open',
      'instance_settings' => _field_group_markup_format_settings_default(),
    ),
  );

  return array(
    'display' => $group_additions,
    'form' => $group_additions,
  );
}

/**
 * Implements hook_field_group_formatter_settings().
 *
 * Provide a settings form for the field group link formatter.
 */
function field_group_markup_field_group_format_settings($group) {
  if ($group->format_type == 'markup') {
    $format_settings = &$group->format_settings['instance_settings'];
    $format_settings = _field_group_markup_format_settings_default() + $format_settings;

    $form_settings = &$form['instance_settings'];

    $form_settings['wrapper_selector'] = array(
      '#title' => t('Wrapper selector'),
      '#type' => 'textfield',
      '#default_value' => $format_settings['wrapper_selector'],
    );

    $form_settings['group_selector'] = array(
      '#title' => t('Group selector'),
      '#type' => 'textfield',
      '#default_value' => $format_settings['group_selector'],
    );

    $form_settings['label_selector'] = array(
      '#title' => t('Label selector'),
      '#type' => 'textfield',
      '#default_value' => $format_settings['label_selector'],
    );

    $form_settings['show_label'] = array(
      '#title' => t('Show label'),
      '#type' => 'select',
      '#default_value' => $format_settings['show_label'],
      '#options' => array(t('No'), t('Yes')),
    );

    $form_settings['elements_group_selector'] = array(
      '#title' => t('Elements group selector'),
      '#type' => 'textfield',
      '#default_value' => $format_settings['elements_group_selector'],
    );

    $form_settings['markup'] = array(
      '#title' => t('Markup'),
      '#type' => 'textfield',
      '#default_value' => $format_settings['markup'],
    );

    $form_settings['hide_group'] = array(
      '#title' => t('Hide empty group'),
      '#type' => 'checkbox',
      '#default_value' => $format_settings['hide_group'],
    );

    $form_settings['before'] = array(
      '#title' => t('Before'),
      '#type' => 'textfield',
      '#default_value' => $format_settings['before'],
    );

    $form_settings['after'] = array(
      '#title' => t('After'),
      '#type' => 'textfield',
      '#default_value' => $format_settings['after'],
    );

    return $form;
  }
}

/**
 * Implements hook_field_group_build_pre_render_alter().
 */
function field_group_markup_field_group_build_pre_render_alter(&$element) {
  foreach ($element['#fieldgroups'] as $group_name => &$group) {
    if ($group->format_type == 'markup') {
      $format_settings = &$group->format_settings['instance_settings'];
      $format_settings = _field_group_markup_format_settings_default() + $format_settings;

      $data = array(
        'wrapper_tag' => '',
        'wrapper_attrs' => array(),
        'group_tag' => '',
        'group_attrs' => array(),
        'label_tag' => '',
        'label_attrs' => array(),
        'label' => $element['#groups'][$group_name]->label,
        'elements_group_tag' => '',
        'elements_group_attrs' => array(),
        'markup' => $format_settings['markup'],
        'group' => &$group,
        'element' => &$element,
      );

      list($data['wrapper_tag'], $data['wrapper_attrs']) = _field_group_markup_parse_selector($format_settings['wrapper_selector']);
      list($data['group_tag'], $data['group_attrs']) = _field_group_markup_parse_selector($format_settings['group_selector']);
      list($data['label_tag'], $data['label_attrs']) = _field_group_markup_parse_selector($format_settings['label_selector']);
      list($data['elements_group_tag'], $data['elements_group_attrs']) = _field_group_markup_parse_selector($format_settings['elements_group_selector']);

      // hook_field_group_markup_data_alter().
      drupal_alter('field_group_markup_data', $data);

      // Wrap
      $wrapper_wrap = _field_group_markup_wrapper($data['wrapper_tag'], $data['wrapper_attrs']);
      $group_wrap = _field_group_markup_wrapper($data['group_tag'], $data['group_attrs']);
      $label_wrap = _field_group_markup_wrapper($data['label_tag'], $data['label_attrs']);
      $elements_group_wrap = _field_group_markup_wrapper($data['elements_group_tag'], $data['elements_group_attrs']);

      // Structure render
      $render_group = array(
        '#weight' => $group->weight,
        '#markup' => $data['markup'],
      );

      $render_group['#prefix'] = "{$format_settings['before']}{$wrapper_wrap['#prefix']}{$group_wrap['#prefix']}";
      if ($format_settings['show_label']) {
        $render_group['#prefix'] .= "{$label_wrap['#prefix']}{$data['label']}{$label_wrap['#suffix']}";
      }

      $render_group['#prefix'] .= $elements_group_wrap['#prefix'];
      $render_group['#suffix'] = "{$elements_group_wrap['#suffix']}{$group_wrap['#suffix']}{$wrapper_wrap['#suffix']}{$format_settings['after']}";

      // Show field group.
      if (!$format_settings['hide_group']) {
        $render_group['_markup'] = array(
          '#type' => 'markup',
          '#markup' => '',
        );
      }

      // Search field group element
      $filter = function (&$item, $key, $data) {
        if ($key === $data['group_name'] && is_array($item)) {
          $item = array_merge($item, $data['render_group']);
          return;
        }
        
        if (is_array($item)) {
          array_walk($item, $data['callback'], $data);
        }
      };

      array_walk($element, $filter, array(
        'group_name' => $group_name,
        'callback' => $filter,
        'render_group' => $render_group,
      ));
    }
  }
}
