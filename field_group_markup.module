<?php
/**
 * @file
 * field_group_markup.module
 *
 * Defines a field group display formatter.
 */

/**
 * Parse css selector
 */
function _field_group_markup_parse_selector($selector) {
  $attrs = array();
  $tag = '';

  if (preg_match_all('/(^[\w\-]+)|(#[\w\-]+)|(\.[\w\-]+)|(\[[\w\-]+="[\w\-\s]+"\])/iu', $selector, $matches)) {
    // tag
    $matches[1] = array_values(array_filter($matches[1]));
    if (isset($matches[1][0])) {
      $tag = $matches[1][0];
    }

    // id
    $matches[2] = array_values(array_filter($matches[2]));
    if (isset($matches[2][0])) {
      $attrs['id'] = substr($matches[2][0], 1);
    }

    // classes
    $matches[3] = array_values(array_filter($matches[3]));
    if ($matches[3]) {
      $attrs['class'] = array();
      foreach ($matches[3] as $value) {
        $attrs['class'][] = substr($value, 1);
      }
    }

    // attrs
    $matches[4] = array_values(array_filter($matches[4]));
    if ($matches[4]) {
      foreach ($matches[4] as $value) {
        list($name, $value) = explode('="', substr($value, 1, -2), 2);
        $attrs[$name] = $value;
      }
    }
  }

  return array($tag, $attrs);
}

/**
 * Implements hook_field_group_formatter_info().
 *
 * Define the field group link display formatter.
 */
function field_group_markup_field_group_formatter_info() {
  $group_additions = array(
    'markup' => array(
      'label' => t('Markup'),
      'format_types' => array('open'),
      'default_formatter' => 'open',
      'instance_settings' => array(
        'wrapper_selector' => '',
        'group_selector' => '',
        'label_selector' => '',
        'elements_group_selector' => '',
        'markup' => '',
        'show_label' => '',
        'hide_group' => '',
        'before' => '',
        'after' => '',
      )
    )
  );

  return array(
    'display' => $group_additions,
    'form' => $group_additions
  );
}

/**
 * Implements hook_field_group_formatter_settings().
 *
 * Provide a settings form for the field group link formatter.
 */
function field_group_markup_field_group_format_settings($group) {
  if ($group->format_type == 'markup') {
    $format_settings = &$group->format_settings['instance_settings'];

    $wrapper_selector = isset($format_settings['wrapper_selector']) ? $format_settings['wrapper_selector'] : '';
    $group_selector = isset($format_settings['group_selector']) ? $format_settings['group_selector'] : '';
    $label_selector = isset($format_settings['label_selector']) ? $format_settings['label_selector'] : '';
    $elements_group_selector = isset($format_settings['elements_group_selector']) ? $format_settings['elements_group_selector'] : '';
    $markup = isset($format_settings['markup']) ? $format_settings['markup'] : '';
    $show_label = isset($format_settings['show_label']) ? $format_settings['show_label'] : 0;
    $hide_group = isset($format_settings['hide_group']) ? $format_settings['hide_group'] : 0;
    $before = isset($format_settings['before']) ? $format_settings['before'] : '';
    $after = isset($format_settings['after']) ? $format_settings['after'] : '';

    $form_settings = &$form['instance_settings'];

    $form_settings['wrapper_selector'] = array(
      '#title' => t('Wrapper selector'),
      '#type' => 'textfield',
      '#default_value' => $wrapper_selector,
    );

    $form_settings['group_selector'] = array(
      '#title' => t('Group selector'),
      '#type' => 'textfield',
      '#default_value' => $group_selector,
    );

    $form_settings['label_selector'] = array(
      '#title' => t('Label selector'),
      '#type' => 'textfield',
      '#default_value' => $label_selector,
    );

    $form_settings['show_label'] = array(
      '#title' => t('Show label'),
      '#type' => 'select',
      '#default_value' => $show_label,
      '#options' => array('Нет', 'Да'),
    );

    $form_settings['elements_group_selector'] = array(
      '#title' => t('Elements group selector'),
      '#type' => 'textfield',
      '#default_value' => $elements_group_selector,
    );

    $form_settings['markup'] = array(
      '#title' => t('Markup'),
      '#type' => 'textfield',
      '#default_value' => $markup,
    );

    $form_settings['hide_group'] = array(
      '#title' => t('Hide empty group'),
      '#type' => 'checkbox',
      '#default_value' => $hide_group,
    );

    $form_settings['before'] = array(
      '#title' => t('Before'),
      '#type' => 'textfield',
      '#default_value' => $before,
    );

    $form_settings['after'] = array(
      '#title' => t('After'),
      '#type' => 'textfield',
      '#default_value' => $after,
    );

    return $form;
  }
}

/**
 * Implements hook_field_group_build_pre_render_alter().
 */
function field_group_markup_field_group_build_pre_render_alter(&$element) {
  foreach ($element['#fieldgroups'] as $group_name => &$group) {
    if ($group->format_type == 'markup') {
      $format_settings = &$group->format_settings['instance_settings'];

      $wrapper_selector = isset($format_settings['wrapper_selector']) ? $format_settings['wrapper_selector'] : '';
      $group_selector = isset($format_settings['group_selector']) ? $format_settings['group_selector'] : '';
      $label_selector = isset($format_settings['label_selector']) ? $format_settings['label_selector'] : '';
      $elements_group_selector = isset($format_settings['elements_group_selector']) ? $format_settings['elements_group_selector'] : '';
      $markup = isset($format_settings['markup']) ? $format_settings['markup'] : '';
      $show_label = isset($format_settings['show_label']) ? $format_settings['show_label'] : 0;
      $hide_group = isset($format_settings['hide_group']) ? $format_settings['hide_group'] : 0;
      $before = isset($format_settings['before']) ? $format_settings['before'] : '';
      $after = isset($format_settings['after']) ? $format_settings['after'] : '';

      $data = array(
        'wrapper_tag' => '',
        'group_tag' => '',
        'label_tag' => '',
        'elements_group_tag' => '',
        'label' => $element['#groups'][$group_name]->label,
        'wrapper_attrs' => array(),
        'group_attrs' => array(),
        'label_attrs' => array(),
        'elements_group_attrs' => array(),
        'markup' => $markup,
        'group' => &$group,
        'element' => &$element,
      );

      list($data['wrapper_tag'], $data['wrapper_attrs']) = _field_group_markup_parse_selector($wrapper_selector);
      list($data['group_tag'], $data['group_attrs']) = _field_group_markup_parse_selector($group_selector);
      list($data['label_tag'], $data['label_attrs']) = _field_group_markup_parse_selector($label_selector);
      list($data['elements_group_tag'], $data['elements_group_attrs']) = _field_group_markup_parse_selector($elements_group_selector);

      // hook_field_group_markup_data_alter().
      drupal_alter('field_group_markup_data', $data);

      // Group
      $wrapper_prefix = '';
      $wrapper_suffix = '';
      if ($data['wrapper_tag'] || $data['wrapper_attrs']) {
        if ($data['wrapper_tag'] == '') {
          $data['wrapper_tag'] = 'div';
        }
        $wrapper_prefix = '<' . $data['wrapper_tag'] . drupal_attributes($data['wrapper_attrs']) . '>';
        $wrapper_suffix = '</' . $data['wrapper_tag'] . '>';
      }

      // Group
      $group_prefix = '';
      $group_suffix = '';
      if ($data['group_tag'] || $data['group_attrs']) {
        if ($data['group_tag'] == '') {
          $data['group_tag'] = 'div';
        }
        $group_prefix = '<' . $data['group_tag'] . drupal_attributes($data['group_attrs']) . '>';
        $group_suffix = '</' . $data['group_tag'] . '>';
      }

      // Label
      $label_prefix = '';
      $label_suffix = '';
      if ($data['label_tag'] || $data['label_attrs']) {
        if ($data['label_tag'] == '') {
          $data['label_tag'] = 'div';
        }
        $label_prefix = '<' . $data['label_tag'] . drupal_attributes($data['label_attrs']) . '>';
        $label_suffix = '</' . $data['label_tag'] . '>';
      }

      // Elements group
      $elements_group_prefix = '';
      $elements_group_suffix = '';
      if ($data['elements_group_tag'] || $data['elements_group_attrs']) {
        if ($data['elements_group_tag'] == '') {
          $data['elements_group_tag'] = 'div';
        }
        $elements_group_prefix = '<' . $data['elements_group_tag'] . drupal_attributes($data['elements_group_attrs']) . '>';
        $elements_group_suffix = '</' . $data['elements_group_tag'] . '>';
      }

      // Structure render
      $element_group = array();

      $element_group['#weight'] = $group->weight;

      $element_group['#prefix'] = $before . $wrapper_prefix . $group_prefix;
      if ($show_label) {
        $element_group['#prefix'] .= $label_prefix;
        $element_group['#prefix'] .= $data['label'];
        $element_group['#prefix'] .= $label_suffix;
      }

      $element_group['#prefix'] .= $elements_group_prefix;
      $element_group['#suffix'] = $elements_group_suffix . $group_suffix . $wrapper_suffix . $after;

      // Markup render
      $element_group['#markup'] = $data['markup'];

      // Show field group.
      if (!$hide_group) {
        $element_group['_markup'] = array(
          '#type' => 'markup',
          '#markup' => ''
        );
      }

      // Search field group element
      $filter = function (&$item, $key, $data) {
        if ($key === $data['group_name'] && is_array($item)) {
          $item = array_merge($item, $data['element_group']);
        }
        elseif (is_array($item)) {
          array_walk($item, $data['callback'], $data);
        }
      };

      array_walk($element, $filter, array(
        'group_name' => $group_name,
        'callback' => $filter,
        'element_group' => $element_group,
      ));
    }
  }
}
